// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const getUsersWithNoTickets = `-- name: GetUsersWithNoTickets :many
SELECT 
    u.id, 
    CONCAT(p.first_name, ' ', p.last_name) AS full_name, 
    u.role,
    COUNT(r.ticket_id) AS ticket_count
FROM "user" u
LEFT JOIN "reservation" r ON u.id = r.user_id
JOIN "profile" p ON u.id = p.user_id
WHERE u.role != 'ADMIN'
GROUP BY u.id, p.first_name, p.last_name, u.role, r.status
HAVING COUNT(r.ticket_id) = 0
ORDER BY u.id
`

type GetUsersWithNoTicketsRow struct {
	ID          int64       `json:"id"`
	FullName    interface{} `json:"full_name"`
	Role        Role        `json:"role"`
	TicketCount int64       `json:"ticket_count"`
}

func (q *Queries) GetUsersWithNoTickets(ctx context.Context) ([]GetUsersWithNoTicketsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWithNoTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersWithNoTicketsRow{}
	for rows.Next() {
		var i GetUsersWithNoTicketsRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Role,
			&i.TicketCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
