// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const getSumOfPaymentInDifferentMonth = `-- name: GetSumOfPaymentInDifferentMonth :many
SELECT 
    u.id, 
    CONCAT(pro.first_name, ' ', pro.last_name) AS full_name,
    TO_CHAR(pa.created_at, 'YYYY-MM') AS payment_month,
    SUM(pa.amount) AS total_amount
FROM "user" u 
INNER JOIN "reservation" r ON u.id = r.user_id
LEFT JOIN "payment" pa ON r.payment_id = pa.id
JOIN "profile" pro ON u.id = pro.user_id
GROUP BY u.id, pro.first_name, pro.last_name, TO_CHAR(pa.created_at, 'YYYY-MM')
HAVING SUM(pa.amount) IS NOT NULL
ORDER BY u.id, payment_month
`

type GetSumOfPaymentInDifferentMonthRow struct {
	ID           int64       `json:"id"`
	FullName     interface{} `json:"full_name"`
	PaymentMonth string      `json:"payment_month"`
	TotalAmount  int64       `json:"total_amount"`
}

func (q *Queries) GetSumOfPaymentInDifferentMonth(ctx context.Context) ([]GetSumOfPaymentInDifferentMonthRow, error) {
	rows, err := q.db.QueryContext(ctx, getSumOfPaymentInDifferentMonth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSumOfPaymentInDifferentMonthRow{}
	for rows.Next() {
		var i GetSumOfPaymentInDifferentMonthRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PaymentMonth,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserInfoWithNewTicket = `-- name: GetUserInfoWithNewTicket :one
SELECT 
    u.id,
    CONCAT(pro.first_name, ' ', pro.last_name) AS full_name,
    TO_CHAR(pa.created_at, 'YYYY-MM-DD	HH24:MI:SS') AS "created at"
FROM "user" u
INNER JOIN "profile" pro ON u.id = pro.user_id
INNER JOIN "reservation" re ON u.id = re.user_id
INNER JOIN "ticket" t ON re.ticket_id = t.id
INNER JOIN "payment" pa ON pa.id = re.payment_id
WHERE pa.status = 'COMPLETED'
ORDER BY pa.created_at DESC
LIMIT 1
`

type GetUserInfoWithNewTicketRow struct {
	ID        int64       `json:"id"`
	FullName  interface{} `json:"full_name"`
	CreatedAt string      `json:"created at"`
}

func (q *Queries) GetUserInfoWithNewTicket(ctx context.Context) (GetUserInfoWithNewTicketRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfoWithNewTicket)
	var i GetUserInfoWithNewTicketRow
	err := row.Scan(&i.ID, &i.FullName, &i.CreatedAt)
	return i, err
}

const getUserWithOneTicketInCity = `-- name: GetUserWithOneTicketInCity :many
SELECT 
    u.id,
    CONCAT(pro.first_name, ' ', pro.last_name) AS full_name,
    CONCAT(dc.province, '  (', dc.county, ')') AS destination,
    COUNT(dc.county) AS "tripNO."
FROM "user" u
INNER JOIN "profile" pro ON u.id = pro.user_id
INNER JOIN "reservation" re ON u.id = re.user_id
INNER JOIN "ticket" t ON re.ticket_id = t.id
INNER JOIN "route" ro ON t.route_id = ro.id
INNER JOIN "city" oc ON oc.id = ro.origin_city_id
INNER JOIN "city" dc ON dc.id = ro.destination_city_id
GROUP BY u.id, pro.first_name, pro.last_name, dc.county, dc.province
HAVING COUNT(dc.county) = 1
ORDER BY u.id
`

type GetUserWithOneTicketInCityRow struct {
	ID          int64       `json:"id"`
	FullName    interface{} `json:"full_name"`
	Destination interface{} `json:"destination"`
	TripNO      int64       `json:"tripNO."`
}

func (q *Queries) GetUserWithOneTicketInCity(ctx context.Context) ([]GetUserWithOneTicketInCityRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWithOneTicketInCity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserWithOneTicketInCityRow{}
	for rows.Next() {
		var i GetUserWithOneTicketInCityRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Destination,
			&i.TripNO,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithTickets = `-- name: GetUserWithTickets :many
SELECT 
    u.id, 
    CONCAT(pro.first_name, ' ', pro.last_name) AS full_name, 
    u.role,
    COUNT(r.ticket_id) AS ticket_count
FROM "user" u
INNER JOIN "profile" pro ON u.id = pro.user_id
INNER JOIN "reservation" r ON u.id = r.user_id
INNER JOIN "payment" pa ON pa.id = r.payment_id
WHERE u.role != 'ADMIN' AND pa.status = 'COMPLETED'
GROUP BY u.id, pro.first_name, pro.last_name, u.role
HAVING COUNT(r.ticket_id) > 0
ORDER BY u.id
`

type GetUserWithTicketsRow struct {
	ID          int64       `json:"id"`
	FullName    interface{} `json:"full_name"`
	Role        Role        `json:"role"`
	TicketCount int64       `json:"ticket_count"`
}

func (q *Queries) GetUserWithTickets(ctx context.Context) ([]GetUserWithTicketsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWithTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserWithTicketsRow{}
	for rows.Next() {
		var i GetUserWithTicketsRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Role,
			&i.TicketCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithNoTickets = `-- name: GetUsersWithNoTickets :many
SELECT 
    u.id, 
    CONCAT(p.first_name, ' ', p.last_name) AS full_name, 
    u.role,
    COUNT(r.ticket_id) AS ticket_count
FROM "user" u
LEFT JOIN "reservation" r ON u.id = r.user_id
JOIN "profile" p ON u.id = p.user_id
WHERE u.role != 'ADMIN'
GROUP BY u.id, p.first_name, p.last_name, u.role, r.status
HAVING COUNT(r.ticket_id) = 0
ORDER BY u.id
`

type GetUsersWithNoTicketsRow struct {
	ID          int64       `json:"id"`
	FullName    interface{} `json:"full_name"`
	Role        Role        `json:"role"`
	TicketCount int64       `json:"ticket_count"`
}

func (q *Queries) GetUsersWithNoTickets(ctx context.Context) ([]GetUsersWithNoTicketsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersWithNoTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersWithNoTicketsRow{}
	for rows.Next() {
		var i GetUsersWithNoTicketsRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Role,
			&i.TicketCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
